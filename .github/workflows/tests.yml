name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PYTHON_VERSION: "3.11.7"
      POETRY_VERSION: "1.7.1"
    
    steps:
      - uses: actions/checkout@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            openmpi-bin libopenmpi-dev \
            python3-dev cmake libgmp-dev \
            build-essential gcc g++ gfortran make \
            libmpfr-dev libmpc-dev libblas-dev liblapack-dev \
            python3-pip

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: 'x64'
          cache: 'pip'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipx
          pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        run: |
          poetry env use ${{ env.pythonLocation }}/bin/python
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: |
          poetry install --with mpi --extras mpi --no-interaction \
            --no-ansi --sync
        env:
          PYTHON_VERSION: "3.11.7"
          POETRY_VERSION: "1.7.1"

      - name: Run tests
        run: |
          poetry run pytest

      - name: Check formatting
        if: success()
        run: |
          poetry run black . --check
          poetry run isort . --check
          poetry run flake8 .
