name: Quantum CI

on: [push, pull_request]

jobs:
  quantum-simulation:
    runs-on: ubuntu-24.04
    env:
      PYTHON_VERSION: "3.11.7"
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install System Dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          gfortran \
          libopenmpi-dev \
          openmpi-bin \
          libblas-dev \
          liblapack-dev \
          libgmp-dev

    - name: Set Up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Poetry
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipx
        pipx install poetry==1.7.1

    - name: Configure Poetry
      run: |
        poetry env use ${{ env.pythonLocation }}/bin/python
        poetry config virtualenvs.in-project true

    - name: Configure MPI Environment
      run: |
        echo "MPICC=$(which mpicc)" >> $GITHUB_ENV
        echo "CFLAGS=-I/usr/include/openmpi" >> $GITHUB_ENV
        echo "LDFLAGS=-L/usr/lib/x86_64-linux-gnu/openmpi -lmpi" >> $GITHUB_ENV

    - name: Install Dependencies
      run: |
        MPICC=$(which mpicc) poetry install --with mpi,quantum,dev,lint,test --extras mpi -v --no-interaction
      env:
        OMPI_DIR: "/usr/lib/x86_64-linux-gnu/openmpi"
        C_INCLUDE_PATH: "/usr/lib/x86_64-linux-gnu/openmpi/include"
        LIBRARY_PATH: "/usr/lib/x86_64-linux-gnu/openmpi/lib"

    - name: Run Linters
      run: |
        poetry run black --check .
        poetry run isort --check-only .
        poetry run flake8 .

    - name: Run Quantum Validation
      run: |
        mpirun --version
        poetry run python -c "from mpi4py import MPI; print(f'MPI {MPI.Get_library_version()} initialized')"
        poetry run python -c "from qiskit_aer import Aer; print('Available backends:', Aer.backends())"

    - name: Run Tests
      run: poetry run pytest --cov=src/em_sim --cov-report=xml

    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
